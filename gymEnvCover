{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "7613a216-4ee2-448c-9f05-3efb06be425c",
   "metadata": {},
   "outputs": [],
   "source": [
    "from torch import nn\n",
    "import torch \n",
    "import os, sys\n",
    "sys.path.append('/mnt/data/projects/wankun01/workdir/playground/dqn/venv/lib/python3.9/site-packages')\n",
    "import gym\n",
    "from gym import spaces\n",
    "import itertools\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import random\n",
    "from collections import deque\n",
    "\n",
    "sys.path.append('/mnt/data/projects/wankun01/workdir/cover')\n",
    "from cover_trade_tools.data_reader import create_dataframe_from_csv, get_source, read_exec, read_rate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "ba99ddbb-e2df-4766-be00-f9dac73eb614",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2022-03-01 00:00:00 2022-03-05 00:00:00\n"
     ]
    }
   ],
   "source": [
    "# read in data\n",
    "start = '2022-03-01'\n",
    "end = '2022-03-05'\n",
    "FX_DATA = '/mnt/data/FXData/'\n",
    "currency_pair = 'USDJPY'\n",
    "df_exec, df_rate = create_dataframe_from_csv(start, end, FX_DATA='/mnt/data/FXData/', currency_pair = 'USDJPY')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "875b8f0d-ee7f-42ca-93fa-1e25b517a0f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_exec = df_exec.resample(PERIOD).sum()[['Deposit', 'Position']].reset_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "4fc2a122-925a-46b4-93cd-c04d498e0ad8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5745 5745 5745\n"
     ]
    }
   ],
   "source": [
    "PERIOD = '1T'\n",
    "# WINDOW = 120\n",
    "df_rate.dropna(inplace=True)\n",
    "\n",
    "RATE_TYPE = 'BestBid'\n",
    "bid_rates = pd.DataFrame()\n",
    "bid_rates['Open'] = df_rate[RATE_TYPE].resample(PERIOD).first()\n",
    "bid_rates['Close'] = df_rate[RATE_TYPE].resample(PERIOD).last()\n",
    "bid_rates['High'] = df_rate[RATE_TYPE].resample(PERIOD).max()\n",
    "bid_rates['Low'] = df_rate[RATE_TYPE].resample(PERIOD).min()\n",
    "bid_rates['Mean'] = df_rate[RATE_TYPE].resample(PERIOD).mean()\n",
    "bid_rates.reset_index(inplace=True)\n",
    "\n",
    "\n",
    "RATE_TYPE = 'BestAsk'\n",
    "ask_rates = pd.DataFrame()\n",
    "ask_rates['Open'] = df_rate[RATE_TYPE].resample(PERIOD).first()\n",
    "ask_rates['Close'] = df_rate[RATE_TYPE].resample(PERIOD).last()\n",
    "ask_rates['High'] = df_rate[RATE_TYPE].resample(PERIOD).max()\n",
    "ask_rates['Low'] = df_rate[RATE_TYPE].resample(PERIOD).min()\n",
    "ask_rates['Mean'] = df_rate[RATE_TYPE].resample(PERIOD).mean()\n",
    "ask_rates.reset_index(inplace=True)\n",
    "\n",
    "ask_rates = ask_rates[ask_rates['TS'].between(df_exec.TS.iloc[0], df_exec.TS.iloc[-1])]\n",
    "bid_rates = bid_rates[bid_rates['TS'].between(df_exec.TS.iloc[0], df_exec.TS.iloc[-1])]\n",
    "print(len(ask_rates), len(bid_rates), len(df_exec))\n",
    "# should be same length"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "916fb476-50dd-4f72-a3f5-975b9014880e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>TS</th>\n",
       "      <th>Open</th>\n",
       "      <th>Close</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Mean</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>430</th>\n",
       "      <td>2022-03-01 07:10:00</td>\n",
       "      <td>114.9740</td>\n",
       "      <td>114.9675</td>\n",
       "      <td>114.982</td>\n",
       "      <td>114.9663</td>\n",
       "      <td>114.972808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>431</th>\n",
       "      <td>2022-03-01 07:11:00</td>\n",
       "      <td>114.9652</td>\n",
       "      <td>114.9820</td>\n",
       "      <td>114.982</td>\n",
       "      <td>114.9637</td>\n",
       "      <td>114.971867</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>432</th>\n",
       "      <td>2022-03-01 07:12:00</td>\n",
       "      <td>114.9820</td>\n",
       "      <td>114.9657</td>\n",
       "      <td>114.982</td>\n",
       "      <td>114.9653</td>\n",
       "      <td>114.971196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>433</th>\n",
       "      <td>2022-03-01 07:13:00</td>\n",
       "      <td>114.9667</td>\n",
       "      <td>114.9820</td>\n",
       "      <td>114.982</td>\n",
       "      <td>114.9657</td>\n",
       "      <td>114.969444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>2022-03-01 07:14:00</td>\n",
       "      <td>114.9740</td>\n",
       "      <td>114.9740</td>\n",
       "      <td>114.987</td>\n",
       "      <td>114.9470</td>\n",
       "      <td>114.975032</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6170</th>\n",
       "      <td>2022-03-05 06:50:00</td>\n",
       "      <td>114.8410</td>\n",
       "      <td>114.8560</td>\n",
       "      <td>114.864</td>\n",
       "      <td>114.8410</td>\n",
       "      <td>114.856838</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6171</th>\n",
       "      <td>2022-03-05 06:51:00</td>\n",
       "      <td>114.8540</td>\n",
       "      <td>114.8522</td>\n",
       "      <td>114.854</td>\n",
       "      <td>114.8504</td>\n",
       "      <td>114.851382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6172</th>\n",
       "      <td>2022-03-05 06:52:00</td>\n",
       "      <td>114.8510</td>\n",
       "      <td>114.8570</td>\n",
       "      <td>114.857</td>\n",
       "      <td>114.8417</td>\n",
       "      <td>114.851180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6173</th>\n",
       "      <td>2022-03-05 06:53:00</td>\n",
       "      <td>114.8570</td>\n",
       "      <td>114.8569</td>\n",
       "      <td>114.861</td>\n",
       "      <td>114.8518</td>\n",
       "      <td>114.854937</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6174</th>\n",
       "      <td>2022-03-05 06:54:00</td>\n",
       "      <td>114.8558</td>\n",
       "      <td>114.8600</td>\n",
       "      <td>114.865</td>\n",
       "      <td>114.8488</td>\n",
       "      <td>114.856637</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5745 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                      TS      Open     Close     High       Low        Mean\n",
       "430  2022-03-01 07:10:00  114.9740  114.9675  114.982  114.9663  114.972808\n",
       "431  2022-03-01 07:11:00  114.9652  114.9820  114.982  114.9637  114.971867\n",
       "432  2022-03-01 07:12:00  114.9820  114.9657  114.982  114.9653  114.971196\n",
       "433  2022-03-01 07:13:00  114.9667  114.9820  114.982  114.9657  114.969444\n",
       "434  2022-03-01 07:14:00  114.9740  114.9740  114.987  114.9470  114.975032\n",
       "...                  ...       ...       ...      ...       ...         ...\n",
       "6170 2022-03-05 06:50:00  114.8410  114.8560  114.864  114.8410  114.856838\n",
       "6171 2022-03-05 06:51:00  114.8540  114.8522  114.854  114.8504  114.851382\n",
       "6172 2022-03-05 06:52:00  114.8510  114.8570  114.857  114.8417  114.851180\n",
       "6173 2022-03-05 06:53:00  114.8570  114.8569  114.861  114.8518  114.854937\n",
       "6174 2022-03-05 06:54:00  114.8558  114.8600  114.865  114.8488  114.856637\n",
       "\n",
       "[5745 rows x 6 columns]"
      ]
     },
     "execution_count": 98,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "bid_rates.plot('TS', 'Open')\n",
    "bid_rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "4df44713-2d6d-4d58-9b4b-47e66477a1a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "MAX_POSITION = 1e8\n",
    "MAX_NET_WORTH = 1e8\n",
    "MAX_STEP = 1e6\n",
    "class CoverEnv(gym.Env):\n",
    "    def __init__(self, df_bid, df_ask, df_exec):\n",
    "        super().__init__()\n",
    "        self.df_bid = df_bid\n",
    "        self.df_ask = df_ask\n",
    "        self.df_exec = df_exec\n",
    "        self.reward_range = (0, MAX_POSITION)\n",
    "        self.position = 0\n",
    "        self.deposit = 0\n",
    "        self.max_net_worth = MAX_NET_WORTH\n",
    "        self.vol_sell = 0\n",
    "        self.vol_buy = 0\n",
    "        self.pnl = 0\n",
    "        self.window = 5\n",
    "        self.record_length = df_exec.shape[0]\n",
    "        # Actions of the format Buy x%, Sell x%, Hold, etc.\n",
    "        self.action_space = spaces.Box(\n",
    "            low=np.array([0,0]), high=np.array([3,1]),\n",
    "            dtype=np.float64\n",
    "        )\n",
    "        \n",
    "        # observations\n",
    "        self.obs_space = spaces.Box(\n",
    "            low=0, high=1, shape=(6,6),\n",
    "            dtype=np.float64\n",
    "        )\n",
    "        \n",
    "    def reset(self):\n",
    "        # reset the env state\n",
    "        self.position = 0\n",
    "        self.deposit = 0\n",
    "        # self.vol_sell = 0\n",
    "        # self.vol_buy = 0\n",
    "        # set the step to a random step in the records\n",
    "        self.current_step = random.randint(self.window, len(self.df_exec.loc[:, 'TS']) - 1)\n",
    "        print('Step', self.current_step)\n",
    "        return self._next_obs()\n",
    "    \n",
    "        \n",
    "    def _next_obs(self):\n",
    "        # re-scaling required\n",
    "        def _frame(df):\n",
    "            _frame = np.array([\n",
    "                df.loc[self.current_step-self.window:self.current_step-1, 'Open'].values,\n",
    "                df.loc[self.current_step-self.window:self.current_step-1, 'Close'].values,\n",
    "                df.loc[self.current_step-self.window:self.current_step-1, 'High'].values,\n",
    "                df.loc[self.current_step-self.window:self.current_step-1, 'Low'].values,\n",
    "            ])\n",
    "            return _frame\n",
    "        bid_frame = _frame(self.df_bid)\n",
    "        ask_frame = _frame(self.df_ask)\n",
    "        rates_frame = np.append(bid_frame, ask_frame)\n",
    "        print('Bid record', bid_frame)\n",
    "        print('Ask_record', ask_frame)\n",
    "        obs = np.append(rates_frame, [[\n",
    "            self.position,\n",
    "            self.deposit,\n",
    "            self.max_net_worth,\n",
    "            # self.vol_sell,\n",
    "            # self.vol_buy\n",
    "        \n",
    "        ]]\n",
    "        )\n",
    "        return obs\n",
    "    \n",
    "    def step(self):\n",
    "        self._take_action(action) # change position or not, so the reward calc down below will change as well.\n",
    "        self.current_step += 1\n",
    "        \n",
    "        if self.current_step > self.record_length - 1:\n",
    "            self.current_step = 0\n",
    "        \n",
    "        delay_modifier = (self.current_step / MAX_STEPS)\n",
    "        \n",
    "        def _position_to_deposit(pos, bid, ask):\n",
    "            if pos > 0:\n",
    "                return pos * bid\n",
    "            else:\n",
    "                return pos * ask\n",
    "        \n",
    "        reward = (self.deposit + _position_to_deposit(self.deposit)) * delay_modifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "76f436c1-264c-4570-b4aa-31f4cbb8c2a8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Step 5632\n",
      "Bid record [[115.434  115.425  115.429  115.433  115.434 ]\n",
      " [115.425  115.428  115.435  115.435  115.43  ]\n",
      " [115.436  115.432  115.437  115.437  115.438 ]\n",
      " [115.4234 115.425  115.4229 115.4234 115.4238]]\n",
      "Ask_record [[115.436  115.428  115.431  115.4355 115.434 ]\n",
      " [115.427  115.43   115.437  115.4369 115.431 ]\n",
      " [115.437  115.433  115.438  115.4381 115.44  ]\n",
      " [115.425  115.428  115.425  115.426  115.4259]]\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1.154340e+02, 1.154250e+02, 1.154290e+02, 1.154330e+02,\n",
       "       1.154340e+02, 1.154250e+02, 1.154280e+02, 1.154350e+02,\n",
       "       1.154350e+02, 1.154300e+02, 1.154360e+02, 1.154320e+02,\n",
       "       1.154370e+02, 1.154370e+02, 1.154380e+02, 1.154234e+02,\n",
       "       1.154250e+02, 1.154229e+02, 1.154234e+02, 1.154238e+02,\n",
       "       1.154360e+02, 1.154280e+02, 1.154310e+02, 1.154355e+02,\n",
       "       1.154340e+02, 1.154270e+02, 1.154300e+02, 1.154370e+02,\n",
       "       1.154369e+02, 1.154310e+02, 1.154370e+02, 1.154330e+02,\n",
       "       1.154380e+02, 1.154381e+02, 1.154400e+02, 1.154250e+02,\n",
       "       1.154280e+02, 1.154250e+02, 1.154260e+02, 1.154259e+02,\n",
       "       0.000000e+00, 0.000000e+00, 1.000000e+08])"
      ]
     },
     "execution_count": 116,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "env = CoverEnv(bid_rates, ask_rates, df_exec)\n",
    "_ = env.reset()\n",
    "_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "fbee5083-858a-4287-9fb6-f8859376e9d8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(0, 100000000.0) Box(0.0, [3. 1.], (2,), float64) Box(0.0, 1.0, (6, 6), float64)\n"
     ]
    }
   ],
   "source": [
    "print(env.reward_range, env.action_space, env.obs_space)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c8f5d196-e1f2-4521-a72b-35de4f56ecd3",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "dqn_venv",
   "language": "python",
   "name": "dqn_venv"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
